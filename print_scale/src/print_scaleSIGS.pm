#!/usr/bin/perl -w
#
# This is the (re)generated signal handler class
# You can cut and paste the skeleton signal handler subs from this file
# into the relevant classes in your application or its subclasses
#
# DO NOT EDIT THIS FILE, ANY CHANGES THAT YOU MAKE WILL BE LOST WHEN
# THIS FILE WILL BE OVERWRITTEN BY THE NEXT RUN OF Glade::PerlGenerate
#
#==============================================================================
#=== This is the 'plu' class                              
#==============================================================================
package plu;
require 5.000; use strict 'vars', 'refs', 'subs';
# UI class 'plu' (version 0.01)
# 
# Copyright (c) Date 週五 11月  1 15:18:17 CST 2002
# Author  <allways@allways.taipei.excell.com.tw>
#
# Unspecified copying policy, please contact the author
#  <allways@allways.taipei.excell.com.tw>
#
#==============================================================================
# This perl source file was automatically generated by 
# Glade::PerlGenerate version 0.60 - Fri May  3 03:56:25 BST 2002
# Copyright (c) Author Dermot Musgrove <dermot.musgrove@virgin.net>
#
# from Glade file /home/allways/prs_ext/print_scale/print_scale.glade
# 週一 12月 30 13:43:25 CST 2002
#==============================================================================

BEGIN {
    use src::print_scaleUI;
    # We need the Gnome bindings as well
    use Gnome;
} # End of sub BEGIN

sub app_run {
    my ($class, %params) = @_;
    $class->load_translations('print_scale');
    # You can use the line below to load a test .mo file before it is installed in 
    # the normal place (eg /usr/local/share/locale/zh_TW.Big5/LC_MESSAGES/print_scale.mo)
#    $class->load_translations('print_scale', 'test', undef, '/home/allways/prs_ext/print_scale/ppo/print_scale.mo');
    Gnome->init("$PACKAGE", "$VERSION");
    my $window = $class->new;
    $window->TOPLEVEL->show;

    # Put any extra UI initialisation (eg signal_connect) calls here

    # Now let Gtk handle signals
    Gtk->main;

    $window->TOPLEVEL->destroy;

    return $window;

} # End of sub app_run

#===============================================================================
#=== Below are the default signal handlers for 'plu' class
#===============================================================================
sub about_Form {
    my ($class) = @_;
    my $gtkversion = 
        Gtk->major_version.".".
        Gtk->minor_version.".".
        Gtk->micro_version;
    my $name = $0;
    #
    # Create a Gnome::About '$ab'
    my $ab = new Gnome::About(
        $PACKAGE, 
        $VERSION, 
        _("Copyright")." $DATE", 
        $AUTHOR, 
        _('No description')."\n".
        "Gtk ".     _("version").": $gtkversion\n".
        "Gtk-Perl "._("version").": $Gtk::VERSION\n".
        `gnome-config --version`."\n".
        _("run from file").": $name\n \n".
        '# Unspecified copying policy, please contact the author
#', 
        "$Glade::PerlRun::pixmaps_directory/Logo.xpm", 
    );
    $ab->set_title(_("About")." plu" );
    $ab->position('mouse' );
    $ab->set_policy(1, 1, 0 );
    $ab->set_modal(1 );
    $ab->show;
} # End of sub about_Form

sub destroy_Form {
    my ($class, $data, $object, $instance) = @_;
    Gtk->main_quit; 
} # End of sub destroy_Form

sub toplevel_hide    { shift->get_toplevel->hide    }
sub toplevel_close   { shift->get_toplevel->close   }
sub toplevel_destroy { shift->get_toplevel->destroy }

#==============================================================================
#=== Below are the signal handlers for 'plu' class 
#==============================================================================
sub on_browse_clicked {
    my ($class, $data, $object, $instance, $event) = @_;
    my $me = __PACKAGE__."->on_browse_clicked";
    # Get ref to hash of all widgets on our form
    my $form = $__PACKAGE__::all_forms->{$instance};

    # REPLACE the line below with the actions to be taken when __PACKAGE__."->on_browse_clicked." is called
    __PACKAGE__->show_skeleton_message($me, \@_, __PACKAGE__, "$Glade::PerlRun::pixmaps_directory/Logo.xpm");

} # End of sub on_browse_clicked

sub on_default_clicked {
    my ($class, $data, $object, $instance, $event) = @_;
    my $me = __PACKAGE__."->on_default_clicked";
    # Get ref to hash of all widgets on our form
    my $form = $__PACKAGE__::all_forms->{$instance};

    # REPLACE the line below with the actions to be taken when __PACKAGE__."->on_default_clicked." is called
    __PACKAGE__->show_skeleton_message($me, \@_, __PACKAGE__, "$Glade::PerlRun::pixmaps_directory/Logo.xpm");

} # End of sub on_default_clicked

sub on_entry11_activate {
    my ($class, $data, $object, $instance, $event) = @_;
    my $me = __PACKAGE__."->on_entry11_activate";
    # Get ref to hash of all widgets on our form
    my $form = $__PACKAGE__::all_forms->{$instance};

    # REPLACE the line below with the actions to be taken when __PACKAGE__."->on_entry11_activate." is called
    __PACKAGE__->show_skeleton_message($me, \@_, __PACKAGE__, "$Glade::PerlRun::pixmaps_directory/Logo.xpm");

} # End of sub on_entry11_activate

sub on_plu_delete_event {
    my ($class, $data, $object, $instance, $event) = @_;
    my $me = __PACKAGE__."->on_plu_delete_event";
    # Get ref to hash of all widgets on our form
    my $form = $__PACKAGE__::all_forms->{$instance};

    # REPLACE the line below with the actions to be taken when __PACKAGE__."->on_plu_delete_event." is called
    __PACKAGE__->show_skeleton_message($me, \@_, __PACKAGE__, "$Glade::PerlRun::pixmaps_directory/Logo.xpm");

} # End of sub on_plu_delete_event

sub on_plu_read_clicked {
    my ($class, $data, $object, $instance, $event) = @_;
    my $me = __PACKAGE__."->on_plu_read_clicked";
    # Get ref to hash of all widgets on our form
    my $form = $__PACKAGE__::all_forms->{$instance};

    # REPLACE the line below with the actions to be taken when __PACKAGE__."->on_plu_read_clicked." is called
    __PACKAGE__->show_skeleton_message($me, \@_, __PACKAGE__, "$Glade::PerlRun::pixmaps_directory/Logo.xpm");

} # End of sub on_plu_read_clicked

sub on_plu_write_clicked {
    my ($class, $data, $object, $instance, $event) = @_;
    my $me = __PACKAGE__."->on_plu_write_clicked";
    # Get ref to hash of all widgets on our form
    my $form = $__PACKAGE__::all_forms->{$instance};

    # REPLACE the line below with the actions to be taken when __PACKAGE__."->on_plu_write_clicked." is called
    __PACKAGE__->show_skeleton_message($me, \@_, __PACKAGE__, "$Glade::PerlRun::pixmaps_directory/Logo.xpm");

} # End of sub on_plu_write_clicked

sub on_pluwritetofile_clicked {
    my ($class, $data, $object, $instance, $event) = @_;
    my $me = __PACKAGE__."->on_pluwritetofile_clicked";
    # Get ref to hash of all widgets on our form
    my $form = $__PACKAGE__::all_forms->{$instance};

    # REPLACE the line below with the actions to be taken when __PACKAGE__."->on_pluwritetofile_clicked." is called
    __PACKAGE__->show_skeleton_message($me, \@_, __PACKAGE__, "$Glade::PerlRun::pixmaps_directory/Logo.xpm");

} # End of sub on_pluwritetofile_clicked

sub on_pluwritetoscale_clicked {
    my ($class, $data, $object, $instance, $event) = @_;
    my $me = __PACKAGE__."->on_pluwritetoscale_clicked";
    # Get ref to hash of all widgets on our form
    my $form = $__PACKAGE__::all_forms->{$instance};

    # REPLACE the line below with the actions to be taken when __PACKAGE__."->on_pluwritetoscale_clicked." is called
    __PACKAGE__->show_skeleton_message($me, \@_, __PACKAGE__, "$Glade::PerlRun::pixmaps_directory/Logo.xpm");

} # End of sub on_pluwritetoscale_clicked










#==============================================================================
#=== This is the 'date' class                              
#==============================================================================
package date;
require 5.000; use strict 'vars', 'refs', 'subs';
# UI class 'date' (version 0.01)
# 
# Copyright (c) Date 週五 11月  1 15:18:17 CST 2002
# Author  <allways@allways.taipei.excell.com.tw>
#
# Unspecified copying policy, please contact the author
#  <allways@allways.taipei.excell.com.tw>
#
#==============================================================================
# This perl source file was automatically generated by 
# Glade::PerlGenerate version 0.60 - Fri May  3 03:56:25 BST 2002
# Copyright (c) Author Dermot Musgrove <dermot.musgrove@virgin.net>
#
# from Glade file /home/allways/prs_ext/print_scale/print_scale.glade
# 週一 12月 30 13:43:25 CST 2002
#==============================================================================

BEGIN {
    use src::print_scaleUI;
    # We need the Gnome bindings as well
    use Gnome;
} # End of sub BEGIN

sub app_run {
    my ($class, %params) = @_;
    $class->load_translations('print_scale');
    # You can use the line below to load a test .mo file before it is installed in 
    # the normal place (eg /usr/local/share/locale/zh_TW.Big5/LC_MESSAGES/print_scale.mo)
#    $class->load_translations('print_scale', 'test', undef, '/home/allways/prs_ext/print_scale/ppo/print_scale.mo');
    Gnome->init("$PACKAGE", "$VERSION");
    my $window = $class->new;
    $window->TOPLEVEL->show;

    # Put any extra UI initialisation (eg signal_connect) calls here

    # Now let Gtk handle signals
    Gtk->main;

    $window->TOPLEVEL->destroy;

    return $window;

} # End of sub app_run

#===============================================================================
#=== Below are the default signal handlers for 'date' class
#===============================================================================
sub about_Form {
    my ($class) = @_;
    my $gtkversion = 
        Gtk->major_version.".".
        Gtk->minor_version.".".
        Gtk->micro_version;
    my $name = $0;
    #
    # Create a Gnome::About '$ab'
    my $ab = new Gnome::About(
        $PACKAGE, 
        $VERSION, 
        _("Copyright")." $DATE", 
        $AUTHOR, 
        _('No description')."\n".
        "Gtk ".     _("version").": $gtkversion\n".
        "Gtk-Perl "._("version").": $Gtk::VERSION\n".
        `gnome-config --version`."\n".
        _("run from file").": $name\n \n".
        '# Unspecified copying policy, please contact the author
#', 
        "$Glade::PerlRun::pixmaps_directory/Logo.xpm", 
    );
    $ab->set_title(_("About")." date" );
    $ab->position('mouse' );
    $ab->set_policy(1, 1, 0 );
    $ab->set_modal(1 );
    $ab->show;
} # End of sub about_Form

sub destroy_Form {
    my ($class, $data, $object, $instance) = @_;
    Gtk->main_quit; 
} # End of sub destroy_Form

sub toplevel_hide    { shift->get_toplevel->hide    }
sub toplevel_close   { shift->get_toplevel->close   }
sub toplevel_destroy { shift->get_toplevel->destroy }

#==============================================================================
#=== Below are the signal handlers for 'date' class 
#==============================================================================
sub on_date_delete_event {
    my ($class, $data, $object, $instance, $event) = @_;
    my $me = __PACKAGE__."->on_date_delete_event";
    # Get ref to hash of all widgets on our form
    my $form = $__PACKAGE__::all_forms->{$instance};

    # REPLACE the line below with the actions to be taken when __PACKAGE__."->on_date_delete_event." is called
    __PACKAGE__->show_skeleton_message($me, \@_, __PACKAGE__, "$Glade::PerlRun::pixmaps_directory/Logo.xpm");

} # End of sub on_date_delete_event

sub on_date_read_clicked {
    my ($class, $data, $object, $instance, $event) = @_;
    my $me = __PACKAGE__."->on_date_read_clicked";
    # Get ref to hash of all widgets on our form
    my $form = $__PACKAGE__::all_forms->{$instance};

    # REPLACE the line below with the actions to be taken when __PACKAGE__."->on_date_read_clicked." is called
    __PACKAGE__->show_skeleton_message($me, \@_, __PACKAGE__, "$Glade::PerlRun::pixmaps_directory/Logo.xpm");

} # End of sub on_date_read_clicked

sub on_date_write_clicked {
    my ($class, $data, $object, $instance, $event) = @_;
    my $me = __PACKAGE__."->on_date_write_clicked";
    # Get ref to hash of all widgets on our form
    my $form = $__PACKAGE__::all_forms->{$instance};

    # REPLACE the line below with the actions to be taken when __PACKAGE__."->on_date_write_clicked." is called
    __PACKAGE__->show_skeleton_message($me, \@_, __PACKAGE__, "$Glade::PerlRun::pixmaps_directory/Logo.xpm");

} # End of sub on_date_write_clicked

sub on_default_clicked {
    my ($class, $data, $object, $instance, $event) = @_;
    my $me = __PACKAGE__."->on_default_clicked";
    # Get ref to hash of all widgets on our form
    my $form = $__PACKAGE__::all_forms->{$instance};

    # REPLACE the line below with the actions to be taken when __PACKAGE__."->on_default_clicked." is called
    __PACKAGE__->show_skeleton_message($me, \@_, __PACKAGE__, "$Glade::PerlRun::pixmaps_directory/Logo.xpm");

} # End of sub on_default_clicked

sub on_tare_read_clicked {
    my ($class, $data, $object, $instance, $event) = @_;
    my $me = __PACKAGE__."->on_tare_read_clicked";
    # Get ref to hash of all widgets on our form
    my $form = $__PACKAGE__::all_forms->{$instance};

    # REPLACE the line below with the actions to be taken when __PACKAGE__."->on_tare_read_clicked." is called
    __PACKAGE__->show_skeleton_message($me, \@_, __PACKAGE__, "$Glade::PerlRun::pixmaps_directory/Logo.xpm");

} # End of sub on_tare_read_clicked

sub on_tare_write_clicked {
    my ($class, $data, $object, $instance, $event) = @_;
    my $me = __PACKAGE__."->on_tare_write_clicked";
    # Get ref to hash of all widgets on our form
    my $form = $__PACKAGE__::all_forms->{$instance};

    # REPLACE the line below with the actions to be taken when __PACKAGE__."->on_tare_write_clicked." is called
    __PACKAGE__->show_skeleton_message($me, \@_, __PACKAGE__, "$Glade::PerlRun::pixmaps_directory/Logo.xpm");

} # End of sub on_tare_write_clicked

sub on_unit_price_read_clicked {
    my ($class, $data, $object, $instance, $event) = @_;
    my $me = __PACKAGE__."->on_unit_price_read_clicked";
    # Get ref to hash of all widgets on our form
    my $form = $__PACKAGE__::all_forms->{$instance};

    # REPLACE the line below with the actions to be taken when __PACKAGE__."->on_unit_price_read_clicked." is called
    __PACKAGE__->show_skeleton_message($me, \@_, __PACKAGE__, "$Glade::PerlRun::pixmaps_directory/Logo.xpm");

} # End of sub on_unit_price_read_clicked

sub on_unit_price_write_clicked {
    my ($class, $data, $object, $instance, $event) = @_;
    my $me = __PACKAGE__."->on_unit_price_write_clicked";
    # Get ref to hash of all widgets on our form
    my $form = $__PACKAGE__::all_forms->{$instance};

    # REPLACE the line below with the actions to be taken when __PACKAGE__."->on_unit_price_write_clicked." is called
    __PACKAGE__->show_skeleton_message($me, \@_, __PACKAGE__, "$Glade::PerlRun::pixmaps_directory/Logo.xpm");

} # End of sub on_unit_price_write_clicked

sub on_unit_read_clicked {
    my ($class, $data, $object, $instance, $event) = @_;
    my $me = __PACKAGE__."->on_unit_read_clicked";
    # Get ref to hash of all widgets on our form
    my $form = $__PACKAGE__::all_forms->{$instance};

    # REPLACE the line below with the actions to be taken when __PACKAGE__."->on_unit_read_clicked." is called
    __PACKAGE__->show_skeleton_message($me, \@_, __PACKAGE__, "$Glade::PerlRun::pixmaps_directory/Logo.xpm");

} # End of sub on_unit_read_clicked

sub on_unit_write_clicked {
    my ($class, $data, $object, $instance, $event) = @_;
    my $me = __PACKAGE__."->on_unit_write_clicked";
    # Get ref to hash of all widgets on our form
    my $form = $__PACKAGE__::all_forms->{$instance};

    # REPLACE the line below with the actions to be taken when __PACKAGE__."->on_unit_write_clicked." is called
    __PACKAGE__->show_skeleton_message($me, \@_, __PACKAGE__, "$Glade::PerlRun::pixmaps_directory/Logo.xpm");

} # End of sub on_unit_write_clicked










#==============================================================================
#=== This is the 'string' class                              
#==============================================================================
package string;
require 5.000; use strict 'vars', 'refs', 'subs';
# UI class 'string' (version 0.01)
# 
# Copyright (c) Date 週五 11月  1 15:18:17 CST 2002
# Author  <allways@allways.taipei.excell.com.tw>
#
# Unspecified copying policy, please contact the author
#  <allways@allways.taipei.excell.com.tw>
#
#==============================================================================
# This perl source file was automatically generated by 
# Glade::PerlGenerate version 0.60 - Fri May  3 03:56:25 BST 2002
# Copyright (c) Author Dermot Musgrove <dermot.musgrove@virgin.net>
#
# from Glade file /home/allways/prs_ext/print_scale/print_scale.glade
# 週一 12月 30 13:43:25 CST 2002
#==============================================================================

BEGIN {
    use src::print_scaleUI;
    # We need the Gnome bindings as well
    use Gnome;
} # End of sub BEGIN

sub app_run {
    my ($class, %params) = @_;
    $class->load_translations('print_scale');
    # You can use the line below to load a test .mo file before it is installed in 
    # the normal place (eg /usr/local/share/locale/zh_TW.Big5/LC_MESSAGES/print_scale.mo)
#    $class->load_translations('print_scale', 'test', undef, '/home/allways/prs_ext/print_scale/ppo/print_scale.mo');
    Gnome->init("$PACKAGE", "$VERSION");
    my $window = $class->new;
    $window->TOPLEVEL->show;

    # Put any extra UI initialisation (eg signal_connect) calls here

    # Now let Gtk handle signals
    Gtk->main;

    $window->TOPLEVEL->destroy;

    return $window;

} # End of sub app_run

#===============================================================================
#=== Below are the default signal handlers for 'string' class
#===============================================================================
sub about_Form {
    my ($class) = @_;
    my $gtkversion = 
        Gtk->major_version.".".
        Gtk->minor_version.".".
        Gtk->micro_version;
    my $name = $0;
    #
    # Create a Gnome::About '$ab'
    my $ab = new Gnome::About(
        $PACKAGE, 
        $VERSION, 
        _("Copyright")." $DATE", 
        $AUTHOR, 
        _('No description')."\n".
        "Gtk ".     _("version").": $gtkversion\n".
        "Gtk-Perl "._("version").": $Gtk::VERSION\n".
        `gnome-config --version`."\n".
        _("run from file").": $name\n \n".
        '# Unspecified copying policy, please contact the author
#', 
        "$Glade::PerlRun::pixmaps_directory/Logo.xpm", 
    );
    $ab->set_title(_("About")." string" );
    $ab->position('mouse' );
    $ab->set_policy(1, 1, 0 );
    $ab->set_modal(1 );
    $ab->show;
} # End of sub about_Form

sub destroy_Form {
    my ($class, $data, $object, $instance) = @_;
    Gtk->main_quit; 
} # End of sub destroy_Form

sub toplevel_hide    { shift->get_toplevel->hide    }
sub toplevel_close   { shift->get_toplevel->close   }
sub toplevel_destroy { shift->get_toplevel->destroy }

#==============================================================================
#=== Below are the signal handlers for 'string' class 
#==============================================================================
sub on_browse_clicked {
    my ($class, $data, $object, $instance, $event) = @_;
    my $me = __PACKAGE__."->on_browse_clicked";
    # Get ref to hash of all widgets on our form
    my $form = $__PACKAGE__::all_forms->{$instance};

    # REPLACE the line below with the actions to be taken when __PACKAGE__."->on_browse_clicked." is called
    __PACKAGE__->show_skeleton_message($me, \@_, __PACKAGE__, "$Glade::PerlRun::pixmaps_directory/Logo.xpm");

} # End of sub on_browse_clicked

sub on_default_clicked {
    my ($class, $data, $object, $instance, $event) = @_;
    my $me = __PACKAGE__."->on_default_clicked";
    # Get ref to hash of all widgets on our form
    my $form = $__PACKAGE__::all_forms->{$instance};

    # REPLACE the line below with the actions to be taken when __PACKAGE__."->on_default_clicked." is called
    __PACKAGE__->show_skeleton_message($me, \@_, __PACKAGE__, "$Glade::PerlRun::pixmaps_directory/Logo.xpm");

} # End of sub on_default_clicked

sub on_string_delete_event {
    my ($class, $data, $object, $instance, $event) = @_;
    my $me = __PACKAGE__."->on_string_delete_event";
    # Get ref to hash of all widgets on our form
    my $form = $__PACKAGE__::all_forms->{$instance};

    # REPLACE the line below with the actions to be taken when __PACKAGE__."->on_string_delete_event." is called
    __PACKAGE__->show_skeleton_message($me, \@_, __PACKAGE__, "$Glade::PerlRun::pixmaps_directory/Logo.xpm");

} # End of sub on_string_delete_event

sub on_string_load_clicked {
    my ($class, $data, $object, $instance, $event) = @_;
    my $me = __PACKAGE__."->on_string_load_clicked";
    # Get ref to hash of all widgets on our form
    my $form = $__PACKAGE__::all_forms->{$instance};

    # REPLACE the line below with the actions to be taken when __PACKAGE__."->on_string_load_clicked." is called
    __PACKAGE__->show_skeleton_message($me, \@_, __PACKAGE__, "$Glade::PerlRun::pixmaps_directory/Logo.xpm");

} # End of sub on_string_load_clicked

sub on_string_read_clicked {
    my ($class, $data, $object, $instance, $event) = @_;
    my $me = __PACKAGE__."->on_string_read_clicked";
    # Get ref to hash of all widgets on our form
    my $form = $__PACKAGE__::all_forms->{$instance};

    # REPLACE the line below with the actions to be taken when __PACKAGE__."->on_string_read_clicked." is called
    __PACKAGE__->show_skeleton_message($me, \@_, __PACKAGE__, "$Glade::PerlRun::pixmaps_directory/Logo.xpm");

} # End of sub on_string_read_clicked

sub on_string_write_clicked {
    my ($class, $data, $object, $instance, $event) = @_;
    my $me = __PACKAGE__."->on_string_write_clicked";
    # Get ref to hash of all widgets on our form
    my $form = $__PACKAGE__::all_forms->{$instance};

    # REPLACE the line below with the actions to be taken when __PACKAGE__."->on_string_write_clicked." is called
    __PACKAGE__->show_skeleton_message($me, \@_, __PACKAGE__, "$Glade::PerlRun::pixmaps_directory/Logo.xpm");

} # End of sub on_string_write_clicked

sub on_stringwritetofile_clicked {
    my ($class, $data, $object, $instance, $event) = @_;
    my $me = __PACKAGE__."->on_stringwritetofile_clicked";
    # Get ref to hash of all widgets on our form
    my $form = $__PACKAGE__::all_forms->{$instance};

    # REPLACE the line below with the actions to be taken when __PACKAGE__."->on_stringwritetofile_clicked." is called
    __PACKAGE__->show_skeleton_message($me, \@_, __PACKAGE__, "$Glade::PerlRun::pixmaps_directory/Logo.xpm");

} # End of sub on_stringwritetofile_clicked

sub on_stringwritetoscale_clicked {
    my ($class, $data, $object, $instance, $event) = @_;
    my $me = __PACKAGE__."->on_stringwritetoscale_clicked";
    # Get ref to hash of all widgets on our form
    my $form = $__PACKAGE__::all_forms->{$instance};

    # REPLACE the line below with the actions to be taken when __PACKAGE__."->on_stringwritetoscale_clicked." is called
    __PACKAGE__->show_skeleton_message($me, \@_, __PACKAGE__, "$Glade::PerlRun::pixmaps_directory/Logo.xpm");

} # End of sub on_stringwritetoscale_clicked










#==============================================================================
#=== This is the 'sysinfo' class                              
#==============================================================================
package sysinfo;
require 5.000; use strict 'vars', 'refs', 'subs';
# UI class 'sysinfo' (version 0.01)
# 
# Copyright (c) Date 週五 11月  1 15:18:17 CST 2002
# Author  <allways@allways.taipei.excell.com.tw>
#
# Unspecified copying policy, please contact the author
#  <allways@allways.taipei.excell.com.tw>
#
#==============================================================================
# This perl source file was automatically generated by 
# Glade::PerlGenerate version 0.60 - Fri May  3 03:56:25 BST 2002
# Copyright (c) Author Dermot Musgrove <dermot.musgrove@virgin.net>
#
# from Glade file /home/allways/prs_ext/print_scale/print_scale.glade
# 週一 12月 30 13:43:25 CST 2002
#==============================================================================

BEGIN {
    use src::print_scaleUI;
    # We need the Gnome bindings as well
    use Gnome;
} # End of sub BEGIN

sub app_run {
    my ($class, %params) = @_;
    $class->load_translations('print_scale');
    # You can use the line below to load a test .mo file before it is installed in 
    # the normal place (eg /usr/local/share/locale/zh_TW.Big5/LC_MESSAGES/print_scale.mo)
#    $class->load_translations('print_scale', 'test', undef, '/home/allways/prs_ext/print_scale/ppo/print_scale.mo');
    Gnome->init("$PACKAGE", "$VERSION");
    my $window = $class->new;
    $window->TOPLEVEL->show;

    # Put any extra UI initialisation (eg signal_connect) calls here

    # Now let Gtk handle signals
    Gtk->main;

    $window->TOPLEVEL->destroy;

    return $window;

} # End of sub app_run

#===============================================================================
#=== Below are the default signal handlers for 'sysinfo' class
#===============================================================================
sub about_Form {
    my ($class) = @_;
    my $gtkversion = 
        Gtk->major_version.".".
        Gtk->minor_version.".".
        Gtk->micro_version;
    my $name = $0;
    #
    # Create a Gnome::About '$ab'
    my $ab = new Gnome::About(
        $PACKAGE, 
        $VERSION, 
        _("Copyright")." $DATE", 
        $AUTHOR, 
        _('No description')."\n".
        "Gtk ".     _("version").": $gtkversion\n".
        "Gtk-Perl "._("version").": $Gtk::VERSION\n".
        `gnome-config --version`."\n".
        _("run from file").": $name\n \n".
        '# Unspecified copying policy, please contact the author
#', 
        "$Glade::PerlRun::pixmaps_directory/Logo.xpm", 
    );
    $ab->set_title(_("About")." sysinfo" );
    $ab->position('mouse' );
    $ab->set_policy(1, 1, 0 );
    $ab->set_modal(1 );
    $ab->show;
} # End of sub about_Form

sub destroy_Form {
    my ($class, $data, $object, $instance) = @_;
    Gtk->main_quit; 
} # End of sub destroy_Form

sub toplevel_hide    { shift->get_toplevel->hide    }
sub toplevel_close   { shift->get_toplevel->close   }
sub toplevel_destroy { shift->get_toplevel->destroy }

#==============================================================================
#=== Below are the signal handlers for 'sysinfo' class 
#==============================================================================
sub on_sysinfo_delete_event {
    my ($class, $data, $object, $instance, $event) = @_;
    my $me = __PACKAGE__."->on_sysinfo_delete_event";
    # Get ref to hash of all widgets on our form
    my $form = $__PACKAGE__::all_forms->{$instance};

    # REPLACE the line below with the actions to be taken when __PACKAGE__."->on_sysinfo_delete_event." is called
    __PACKAGE__->show_skeleton_message($me, \@_, __PACKAGE__, "$Glade::PerlRun::pixmaps_directory/Logo.xpm");

} # End of sub on_sysinfo_delete_event










#==============================================================================
#=== This is the 'main' class                              
#==============================================================================
package main;
require 5.000; use strict 'vars', 'refs', 'subs';
# UI class 'main' (version 0.01)
# 
# Copyright (c) Date 週五 11月  1 15:18:17 CST 2002
# Author  <allways@allways.taipei.excell.com.tw>
#
# Unspecified copying policy, please contact the author
#  <allways@allways.taipei.excell.com.tw>
#
#==============================================================================
# This perl source file was automatically generated by 
# Glade::PerlGenerate version 0.60 - Fri May  3 03:56:25 BST 2002
# Copyright (c) Author Dermot Musgrove <dermot.musgrove@virgin.net>
#
# from Glade file /home/allways/prs_ext/print_scale/print_scale.glade
# 週一 12月 30 13:43:25 CST 2002
#==============================================================================

BEGIN {
    use src::print_scaleUI;
    # We need the Gnome bindings as well
    use Gnome;
} # End of sub BEGIN

sub app_run {
    my ($class, %params) = @_;
    $class->load_translations('print_scale');
    # You can use the line below to load a test .mo file before it is installed in 
    # the normal place (eg /usr/local/share/locale/zh_TW.Big5/LC_MESSAGES/print_scale.mo)
#    $class->load_translations('print_scale', 'test', undef, '/home/allways/prs_ext/print_scale/ppo/print_scale.mo');
    Gnome->init("$PACKAGE", "$VERSION");
    my $window = $class->new;
    $window->TOPLEVEL->show;

    # Put any extra UI initialisation (eg signal_connect) calls here

    # Now let Gtk handle signals
    Gtk->main;

    $window->TOPLEVEL->destroy;

    return $window;

} # End of sub app_run

#===============================================================================
#=== Below are the default signal handlers for 'main' class
#===============================================================================
sub about_Form {
    my ($class) = @_;
    my $gtkversion = 
        Gtk->major_version.".".
        Gtk->minor_version.".".
        Gtk->micro_version;
    my $name = $0;
    #
    # Create a Gnome::About '$ab'
    my $ab = new Gnome::About(
        $PACKAGE, 
        $VERSION, 
        _("Copyright")." $DATE", 
        $AUTHOR, 
        _('No description')."\n".
        "Gtk ".     _("version").": $gtkversion\n".
        "Gtk-Perl "._("version").": $Gtk::VERSION\n".
        `gnome-config --version`."\n".
        _("run from file").": $name\n \n".
        '# Unspecified copying policy, please contact the author
#', 
        "$Glade::PerlRun::pixmaps_directory/Logo.xpm", 
    );
    $ab->set_title(_("About")." main" );
    $ab->position('mouse' );
    $ab->set_policy(1, 1, 0 );
    $ab->set_modal(1 );
    $ab->show;
} # End of sub about_Form

sub destroy_Form {
    my ($class, $data, $object, $instance) = @_;
    Gtk->main_quit; 
} # End of sub destroy_Form

sub toplevel_hide    { shift->get_toplevel->hide    }
sub toplevel_close   { shift->get_toplevel->close   }
sub toplevel_destroy { shift->get_toplevel->destroy }

#==============================================================================
#=== Below are the signal handlers for 'main' class 
#==============================================================================
sub on_about_activate {
    my ($class, $data, $object, $instance, $event) = @_;
    my $me = __PACKAGE__."->on_about_activate";
    # Get ref to hash of all widgets on our form
    my $form = $__PACKAGE__::all_forms->{$instance};

    # REPLACE the line below with the actions to be taken when __PACKAGE__."->on_about_activate." is called
    __PACKAGE__->show_skeleton_message($me, \@_, __PACKAGE__, "$Glade::PerlRun::pixmaps_directory/Logo.xpm");

} # End of sub on_about_activate

sub on_date_activate {
    my ($class, $data, $object, $instance, $event) = @_;
    my $me = __PACKAGE__."->on_date_activate";
    # Get ref to hash of all widgets on our form
    my $form = $__PACKAGE__::all_forms->{$instance};

    # REPLACE the line below with the actions to be taken when __PACKAGE__."->on_date_activate." is called
    __PACKAGE__->show_skeleton_message($me, \@_, __PACKAGE__, "$Glade::PerlRun::pixmaps_directory/Logo.xpm");

} # End of sub on_date_activate

sub on_exit_activate {
    my ($class, $data, $object, $instance, $event) = @_;
    my $me = __PACKAGE__."->on_exit_activate";
    # Get ref to hash of all widgets on our form
    my $form = $__PACKAGE__::all_forms->{$instance};

    # REPLACE the line below with the actions to be taken when __PACKAGE__."->on_exit_activate." is called
    __PACKAGE__->show_skeleton_message($me, \@_, __PACKAGE__, "$Glade::PerlRun::pixmaps_directory/Logo.xpm");

} # End of sub on_exit_activate

sub on_label_activate {
    my ($class, $data, $object, $instance, $event) = @_;
    my $me = __PACKAGE__."->on_label_activate";
    # Get ref to hash of all widgets on our form
    my $form = $__PACKAGE__::all_forms->{$instance};

    # REPLACE the line below with the actions to be taken when __PACKAGE__."->on_label_activate." is called
    __PACKAGE__->show_skeleton_message($me, \@_, __PACKAGE__, "$Glade::PerlRun::pixmaps_directory/Logo.xpm");

} # End of sub on_label_activate

sub on_login_activate {
    my ($class, $data, $object, $instance, $event) = @_;
    my $me = __PACKAGE__."->on_login_activate";
    # Get ref to hash of all widgets on our form
    my $form = $__PACKAGE__::all_forms->{$instance};

    # REPLACE the line below with the actions to be taken when __PACKAGE__."->on_login_activate." is called
    __PACKAGE__->show_skeleton_message($me, \@_, __PACKAGE__, "$Glade::PerlRun::pixmaps_directory/Logo.xpm");

} # End of sub on_login_activate

sub on_main_delete_event {
    my ($class, $data, $object, $instance, $event) = @_;
    my $me = __PACKAGE__."->on_main_delete_event";
    # Get ref to hash of all widgets on our form
    my $form = $__PACKAGE__::all_forms->{$instance};

    # REPLACE the line below with the actions to be taken when __PACKAGE__."->on_main_delete_event." is called
    __PACKAGE__->show_skeleton_message($me, \@_, __PACKAGE__, "$Glade::PerlRun::pixmaps_directory/Logo.xpm");

} # End of sub on_main_delete_event

sub on_plu_activate {
    my ($class, $data, $object, $instance, $event) = @_;
    my $me = __PACKAGE__."->on_plu_activate";
    # Get ref to hash of all widgets on our form
    my $form = $__PACKAGE__::all_forms->{$instance};

    # REPLACE the line below with the actions to be taken when __PACKAGE__."->on_plu_activate." is called
    __PACKAGE__->show_skeleton_message($me, \@_, __PACKAGE__, "$Glade::PerlRun::pixmaps_directory/Logo.xpm");

} # End of sub on_plu_activate

sub on_print_format_activate {
    my ($class, $data, $object, $instance, $event) = @_;
    my $me = __PACKAGE__."->on_print_format_activate";
    # Get ref to hash of all widgets on our form
    my $form = $__PACKAGE__::all_forms->{$instance};

    # REPLACE the line below with the actions to be taken when __PACKAGE__."->on_print_format_activate." is called
    __PACKAGE__->show_skeleton_message($me, \@_, __PACKAGE__, "$Glade::PerlRun::pixmaps_directory/Logo.xpm");

} # End of sub on_print_format_activate

sub on_string_activate {
    my ($class, $data, $object, $instance, $event) = @_;
    my $me = __PACKAGE__."->on_string_activate";
    # Get ref to hash of all widgets on our form
    my $form = $__PACKAGE__::all_forms->{$instance};

    # REPLACE the line below with the actions to be taken when __PACKAGE__."->on_string_activate." is called
    __PACKAGE__->show_skeleton_message($me, \@_, __PACKAGE__, "$Glade::PerlRun::pixmaps_directory/Logo.xpm");

} # End of sub on_string_activate

sub on_system_activate {
    my ($class, $data, $object, $instance, $event) = @_;
    my $me = __PACKAGE__."->on_system_activate";
    # Get ref to hash of all widgets on our form
    my $form = $__PACKAGE__::all_forms->{$instance};

    # REPLACE the line below with the actions to be taken when __PACKAGE__."->on_system_activate." is called
    __PACKAGE__->show_skeleton_message($me, \@_, __PACKAGE__, "$Glade::PerlRun::pixmaps_directory/Logo.xpm");

} # End of sub on_system_activate










#==============================================================================
#=== This is the 'fileselection1' class                              
#==============================================================================
package fileselection1;
require 5.000; use strict 'vars', 'refs', 'subs';
# UI class 'fileselection1' (version 0.01)
# 
# Copyright (c) Date 週五 11月  1 15:18:17 CST 2002
# Author  <allways@allways.taipei.excell.com.tw>
#
# Unspecified copying policy, please contact the author
#  <allways@allways.taipei.excell.com.tw>
#
#==============================================================================
# This perl source file was automatically generated by 
# Glade::PerlGenerate version 0.60 - Fri May  3 03:56:25 BST 2002
# Copyright (c) Author Dermot Musgrove <dermot.musgrove@virgin.net>
#
# from Glade file /home/allways/prs_ext/print_scale/print_scale.glade
# 週一 12月 30 13:43:25 CST 2002
#==============================================================================

BEGIN {
    use src::print_scaleUI;
    # We need the Gnome bindings as well
    use Gnome;
} # End of sub BEGIN

sub app_run {
    my ($class, %params) = @_;
    $class->load_translations('print_scale');
    # You can use the line below to load a test .mo file before it is installed in 
    # the normal place (eg /usr/local/share/locale/zh_TW.Big5/LC_MESSAGES/print_scale.mo)
#    $class->load_translations('print_scale', 'test', undef, '/home/allways/prs_ext/print_scale/ppo/print_scale.mo');
    Gnome->init("$PACKAGE", "$VERSION");
    my $window = $class->new;
    $window->TOPLEVEL->show;

    # Put any extra UI initialisation (eg signal_connect) calls here

    # Now let Gtk handle signals
    Gtk->main;

    $window->TOPLEVEL->destroy;

    return $window;

} # End of sub app_run

#===============================================================================
#=== Below are the default signal handlers for 'fileselection1' class
#===============================================================================
sub about_Form {
    my ($class) = @_;
    my $gtkversion = 
        Gtk->major_version.".".
        Gtk->minor_version.".".
        Gtk->micro_version;
    my $name = $0;
    #
    # Create a Gnome::About '$ab'
    my $ab = new Gnome::About(
        $PACKAGE, 
        $VERSION, 
        _("Copyright")." $DATE", 
        $AUTHOR, 
        _('No description')."\n".
        "Gtk ".     _("version").": $gtkversion\n".
        "Gtk-Perl "._("version").": $Gtk::VERSION\n".
        `gnome-config --version`."\n".
        _("run from file").": $name\n \n".
        '# Unspecified copying policy, please contact the author
#', 
        "$Glade::PerlRun::pixmaps_directory/Logo.xpm", 
    );
    $ab->set_title(_("About")." fileselection1" );
    $ab->position('mouse' );
    $ab->set_policy(1, 1, 0 );
    $ab->set_modal(1 );
    $ab->show;
} # End of sub about_Form

sub destroy_Form {
    my ($class, $data, $object, $instance) = @_;
    Gtk->main_quit; 
} # End of sub destroy_Form

sub toplevel_hide    { shift->get_toplevel->hide    }
sub toplevel_close   { shift->get_toplevel->close   }
sub toplevel_destroy { shift->get_toplevel->destroy }

#==============================================================================
#=== Below are the signal handlers for 'fileselection1' class 
#==============================================================================
sub on_file_cancel_clicked {
    my ($class, $data, $object, $instance, $event) = @_;
    my $me = __PACKAGE__."->on_file_cancel_clicked";
    # Get ref to hash of all widgets on our form
    my $form = $__PACKAGE__::all_forms->{$instance};

    # REPLACE the line below with the actions to be taken when __PACKAGE__."->on_file_cancel_clicked." is called
    __PACKAGE__->show_skeleton_message($me, \@_, __PACKAGE__, "$Glade::PerlRun::pixmaps_directory/Logo.xpm");

} # End of sub on_file_cancel_clicked

sub on_file_ok_clicked {
    my ($class, $data, $object, $instance, $event) = @_;
    my $me = __PACKAGE__."->on_file_ok_clicked";
    # Get ref to hash of all widgets on our form
    my $form = $__PACKAGE__::all_forms->{$instance};

    # REPLACE the line below with the actions to be taken when __PACKAGE__."->on_file_ok_clicked." is called
    __PACKAGE__->show_skeleton_message($me, \@_, __PACKAGE__, "$Glade::PerlRun::pixmaps_directory/Logo.xpm");

} # End of sub on_file_ok_clicked

sub on_fileselection1_delete_event {
    my ($class, $data, $object, $instance, $event) = @_;
    my $me = __PACKAGE__."->on_fileselection1_delete_event";
    # Get ref to hash of all widgets on our form
    my $form = $__PACKAGE__::all_forms->{$instance};

    # REPLACE the line below with the actions to be taken when __PACKAGE__."->on_fileselection1_delete_event." is called
    __PACKAGE__->show_skeleton_message($me, \@_, __PACKAGE__, "$Glade::PerlRun::pixmaps_directory/Logo.xpm");

} # End of sub on_fileselection1_delete_event










#==============================================================================
#=== This is the 'about' class                              
#==============================================================================
package about;
require 5.000; use strict 'vars', 'refs', 'subs';
# UI class 'about' (version 0.01)
# 
# Copyright (c) Date 週五 11月  1 15:18:17 CST 2002
# Author  <allways@allways.taipei.excell.com.tw>
#
# Unspecified copying policy, please contact the author
#  <allways@allways.taipei.excell.com.tw>
#
#==============================================================================
# This perl source file was automatically generated by 
# Glade::PerlGenerate version 0.60 - Fri May  3 03:56:25 BST 2002
# Copyright (c) Author Dermot Musgrove <dermot.musgrove@virgin.net>
#
# from Glade file /home/allways/prs_ext/print_scale/print_scale.glade
# 週一 12月 30 13:43:25 CST 2002
#==============================================================================

BEGIN {
    use src::print_scaleUI;
    # We need the Gnome bindings as well
    use Gnome;
} # End of sub BEGIN

sub app_run {
    my ($class, %params) = @_;
    $class->load_translations('print_scale');
    # You can use the line below to load a test .mo file before it is installed in 
    # the normal place (eg /usr/local/share/locale/zh_TW.Big5/LC_MESSAGES/print_scale.mo)
#    $class->load_translations('print_scale', 'test', undef, '/home/allways/prs_ext/print_scale/ppo/print_scale.mo');
    Gnome->init("$PACKAGE", "$VERSION");
    my $window = $class->new;
    $window->TOPLEVEL->show;

    # Put any extra UI initialisation (eg signal_connect) calls here

    # Now let Gtk handle signals
    Gtk->main;

    $window->TOPLEVEL->destroy;

    return $window;

} # End of sub app_run

#===============================================================================
#=== Below are the default signal handlers for 'about' class
#===============================================================================
sub about_Form {
    my ($class) = @_;
    my $gtkversion = 
        Gtk->major_version.".".
        Gtk->minor_version.".".
        Gtk->micro_version;
    my $name = $0;
    #
    # Create a Gnome::About '$ab'
    my $ab = new Gnome::About(
        $PACKAGE, 
        $VERSION, 
        _("Copyright")." $DATE", 
        $AUTHOR, 
        _('No description')."\n".
        "Gtk ".     _("version").": $gtkversion\n".
        "Gtk-Perl "._("version").": $Gtk::VERSION\n".
        `gnome-config --version`."\n".
        _("run from file").": $name\n \n".
        '# Unspecified copying policy, please contact the author
#', 
        "$Glade::PerlRun::pixmaps_directory/Logo.xpm", 
    );
    $ab->set_title(_("About")." about" );
    $ab->position('mouse' );
    $ab->set_policy(1, 1, 0 );
    $ab->set_modal(1 );
    $ab->show;
} # End of sub about_Form

sub destroy_Form {
    my ($class, $data, $object, $instance) = @_;
    Gtk->main_quit; 
} # End of sub destroy_Form

sub toplevel_hide    { shift->get_toplevel->hide    }
sub toplevel_close   { shift->get_toplevel->close   }
sub toplevel_destroy { shift->get_toplevel->destroy }

#==============================================================================
#=== Below are the signal handlers for 'about' class 
#==============================================================================
sub on_about_button_clicked {
    my ($class, $data, $object, $instance, $event) = @_;
    my $me = __PACKAGE__."->on_about_button_clicked";
    # Get ref to hash of all widgets on our form
    my $form = $__PACKAGE__::all_forms->{$instance};

    # REPLACE the line below with the actions to be taken when __PACKAGE__."->on_about_button_clicked." is called
    __PACKAGE__->show_skeleton_message($me, \@_, __PACKAGE__, "$Glade::PerlRun::pixmaps_directory/Logo.xpm");

} # End of sub on_about_button_clicked

sub on_about_delete_event {
    my ($class, $data, $object, $instance, $event) = @_;
    my $me = __PACKAGE__."->on_about_delete_event";
    # Get ref to hash of all widgets on our form
    my $form = $__PACKAGE__::all_forms->{$instance};

    # REPLACE the line below with the actions to be taken when __PACKAGE__."->on_about_delete_event." is called
    __PACKAGE__->show_skeleton_message($me, \@_, __PACKAGE__, "$Glade::PerlRun::pixmaps_directory/Logo.xpm");

} # End of sub on_about_delete_event










#==============================================================================
#=== This is the 'label' class                              
#==============================================================================
package label;
require 5.000; use strict 'vars', 'refs', 'subs';
# UI class 'label' (version 0.01)
# 
# Copyright (c) Date 週五 11月  1 15:18:17 CST 2002
# Author  <allways@allways.taipei.excell.com.tw>
#
# Unspecified copying policy, please contact the author
#  <allways@allways.taipei.excell.com.tw>
#
#==============================================================================
# This perl source file was automatically generated by 
# Glade::PerlGenerate version 0.60 - Fri May  3 03:56:25 BST 2002
# Copyright (c) Author Dermot Musgrove <dermot.musgrove@virgin.net>
#
# from Glade file /home/allways/prs_ext/print_scale/print_scale.glade
# 週一 12月 30 13:43:25 CST 2002
#==============================================================================

BEGIN {
    use src::print_scaleUI;
    # We need the Gnome bindings as well
    use Gnome;
} # End of sub BEGIN

sub app_run {
    my ($class, %params) = @_;
    $class->load_translations('print_scale');
    # You can use the line below to load a test .mo file before it is installed in 
    # the normal place (eg /usr/local/share/locale/zh_TW.Big5/LC_MESSAGES/print_scale.mo)
#    $class->load_translations('print_scale', 'test', undef, '/home/allways/prs_ext/print_scale/ppo/print_scale.mo');
    Gnome->init("$PACKAGE", "$VERSION");
    my $window = $class->new;
    $window->TOPLEVEL->show;

    # Put any extra UI initialisation (eg signal_connect) calls here

    # Now let Gtk handle signals
    Gtk->main;

    $window->TOPLEVEL->destroy;

    return $window;

} # End of sub app_run

#===============================================================================
#=== Below are the default signal handlers for 'label' class
#===============================================================================
sub about_Form {
    my ($class) = @_;
    my $gtkversion = 
        Gtk->major_version.".".
        Gtk->minor_version.".".
        Gtk->micro_version;
    my $name = $0;
    #
    # Create a Gnome::About '$ab'
    my $ab = new Gnome::About(
        $PACKAGE, 
        $VERSION, 
        _("Copyright")." $DATE", 
        $AUTHOR, 
        _('No description')."\n".
        "Gtk ".     _("version").": $gtkversion\n".
        "Gtk-Perl "._("version").": $Gtk::VERSION\n".
        `gnome-config --version`."\n".
        _("run from file").": $name\n \n".
        '# Unspecified copying policy, please contact the author
#', 
        "$Glade::PerlRun::pixmaps_directory/Logo.xpm", 
    );
    $ab->set_title(_("About")." label" );
    $ab->position('mouse' );
    $ab->set_policy(1, 1, 0 );
    $ab->set_modal(1 );
    $ab->show;
} # End of sub about_Form

sub destroy_Form {
    my ($class, $data, $object, $instance) = @_;
    Gtk->main_quit; 
} # End of sub destroy_Form

sub toplevel_hide    { shift->get_toplevel->hide    }
sub toplevel_close   { shift->get_toplevel->close   }
sub toplevel_destroy { shift->get_toplevel->destroy }

#==============================================================================
#=== Below are the signal handlers for 'label' class 
#==============================================================================
sub on_default_clicked {
    my ($class, $data, $object, $instance, $event) = @_;
    my $me = __PACKAGE__."->on_default_clicked";
    # Get ref to hash of all widgets on our form
    my $form = $__PACKAGE__::all_forms->{$instance};

    # REPLACE the line below with the actions to be taken when __PACKAGE__."->on_default_clicked." is called
    __PACKAGE__->show_skeleton_message($me, \@_, __PACKAGE__, "$Glade::PerlRun::pixmaps_directory/Logo.xpm");

} # End of sub on_default_clicked

sub on_label_delete_event {
    my ($class, $data, $object, $instance, $event) = @_;
    my $me = __PACKAGE__."->on_label_delete_event";
    # Get ref to hash of all widgets on our form
    my $form = $__PACKAGE__::all_forms->{$instance};

    # REPLACE the line below with the actions to be taken when __PACKAGE__."->on_label_delete_event." is called
    __PACKAGE__->show_skeleton_message($me, \@_, __PACKAGE__, "$Glade::PerlRun::pixmaps_directory/Logo.xpm");

} # End of sub on_label_delete_event

sub on_label_read_clicked {
    my ($class, $data, $object, $instance, $event) = @_;
    my $me = __PACKAGE__."->on_label_read_clicked";
    # Get ref to hash of all widgets on our form
    my $form = $__PACKAGE__::all_forms->{$instance};

    # REPLACE the line below with the actions to be taken when __PACKAGE__."->on_label_read_clicked." is called
    __PACKAGE__->show_skeleton_message($me, \@_, __PACKAGE__, "$Glade::PerlRun::pixmaps_directory/Logo.xpm");

} # End of sub on_label_read_clicked

sub on_label_write_clicked {
    my ($class, $data, $object, $instance, $event) = @_;
    my $me = __PACKAGE__."->on_label_write_clicked";
    # Get ref to hash of all widgets on our form
    my $form = $__PACKAGE__::all_forms->{$instance};

    # REPLACE the line below with the actions to be taken when __PACKAGE__."->on_label_write_clicked." is called
    __PACKAGE__->show_skeleton_message($me, \@_, __PACKAGE__, "$Glade::PerlRun::pixmaps_directory/Logo.xpm");

} # End of sub on_label_write_clicked










#==============================================================================
#=== This is the 'print_format' class                              
#==============================================================================
package print_format;
require 5.000; use strict 'vars', 'refs', 'subs';
# UI class 'print_format' (version 0.01)
# 
# Copyright (c) Date 週五 11月  1 15:18:17 CST 2002
# Author  <allways@allways.taipei.excell.com.tw>
#
# Unspecified copying policy, please contact the author
#  <allways@allways.taipei.excell.com.tw>
#
#==============================================================================
# This perl source file was automatically generated by 
# Glade::PerlGenerate version 0.60 - Fri May  3 03:56:25 BST 2002
# Copyright (c) Author Dermot Musgrove <dermot.musgrove@virgin.net>
#
# from Glade file /home/allways/prs_ext/print_scale/print_scale.glade
# 週一 12月 30 13:43:25 CST 2002
#==============================================================================

BEGIN {
    use src::print_scaleUI;
    # We need the Gnome bindings as well
    use Gnome;
} # End of sub BEGIN

sub app_run {
    my ($class, %params) = @_;
    $class->load_translations('print_scale');
    # You can use the line below to load a test .mo file before it is installed in 
    # the normal place (eg /usr/local/share/locale/zh_TW.Big5/LC_MESSAGES/print_scale.mo)
#    $class->load_translations('print_scale', 'test', undef, '/home/allways/prs_ext/print_scale/ppo/print_scale.mo');
    Gnome->init("$PACKAGE", "$VERSION");
    my $window = $class->new;
    $window->TOPLEVEL->show;

    # Put any extra UI initialisation (eg signal_connect) calls here

    # Now let Gtk handle signals
    Gtk->main;

    $window->TOPLEVEL->destroy;

    return $window;

} # End of sub app_run

#===============================================================================
#=== Below are the default signal handlers for 'print_format' class
#===============================================================================
sub about_Form {
    my ($class) = @_;
    my $gtkversion = 
        Gtk->major_version.".".
        Gtk->minor_version.".".
        Gtk->micro_version;
    my $name = $0;
    #
    # Create a Gnome::About '$ab'
    my $ab = new Gnome::About(
        $PACKAGE, 
        $VERSION, 
        _("Copyright")." $DATE", 
        $AUTHOR, 
        _('No description')."\n".
        "Gtk ".     _("version").": $gtkversion\n".
        "Gtk-Perl "._("version").": $Gtk::VERSION\n".
        `gnome-config --version`."\n".
        _("run from file").": $name\n \n".
        '# Unspecified copying policy, please contact the author
#', 
        "$Glade::PerlRun::pixmaps_directory/Logo.xpm", 
    );
    $ab->set_title(_("About")." print_format" );
    $ab->position('mouse' );
    $ab->set_policy(1, 1, 0 );
    $ab->set_modal(1 );
    $ab->show;
} # End of sub about_Form

sub destroy_Form {
    my ($class, $data, $object, $instance) = @_;
    Gtk->main_quit; 
} # End of sub destroy_Form

sub toplevel_hide    { shift->get_toplevel->hide    }
sub toplevel_close   { shift->get_toplevel->close   }
sub toplevel_destroy { shift->get_toplevel->destroy }

#==============================================================================
#=== Below are the signal handlers for 'print_format' class 
#==============================================================================
sub on_browse_clicked {
    my ($class, $data, $object, $instance, $event) = @_;
    my $me = __PACKAGE__."->on_browse_clicked";
    # Get ref to hash of all widgets on our form
    my $form = $__PACKAGE__::all_forms->{$instance};

    # REPLACE the line below with the actions to be taken when __PACKAGE__."->on_browse_clicked." is called
    __PACKAGE__->show_skeleton_message($me, \@_, __PACKAGE__, "$Glade::PerlRun::pixmaps_directory/Logo.xpm");

} # End of sub on_browse_clicked

sub on_default_clicked {
    my ($class, $data, $object, $instance, $event) = @_;
    my $me = __PACKAGE__."->on_default_clicked";
    # Get ref to hash of all widgets on our form
    my $form = $__PACKAGE__::all_forms->{$instance};

    # REPLACE the line below with the actions to be taken when __PACKAGE__."->on_default_clicked." is called
    __PACKAGE__->show_skeleton_message($me, \@_, __PACKAGE__, "$Glade::PerlRun::pixmaps_directory/Logo.xpm");

} # End of sub on_default_clicked

sub on_drawingarea2_expose_event {
    my ($class, $data, $object, $instance, $event) = @_;
    my $me = __PACKAGE__."->on_drawingarea2_expose_event";
    # Get ref to hash of all widgets on our form
    my $form = $__PACKAGE__::all_forms->{$instance};

    # REPLACE the line below with the actions to be taken when __PACKAGE__."->on_drawingarea2_expose_event." is called
    __PACKAGE__->show_skeleton_message($me, \@_, __PACKAGE__, "$Glade::PerlRun::pixmaps_directory/Logo.xpm");

} # End of sub on_drawingarea2_expose_event

sub on_formatwritetofile_clicked {
    my ($class, $data, $object, $instance, $event) = @_;
    my $me = __PACKAGE__."->on_formatwritetofile_clicked";
    # Get ref to hash of all widgets on our form
    my $form = $__PACKAGE__::all_forms->{$instance};

    # REPLACE the line below with the actions to be taken when __PACKAGE__."->on_formatwritetofile_clicked." is called
    __PACKAGE__->show_skeleton_message($me, \@_, __PACKAGE__, "$Glade::PerlRun::pixmaps_directory/Logo.xpm");

} # End of sub on_formatwritetofile_clicked

sub on_formatwritetoscale_clicked {
    my ($class, $data, $object, $instance, $event) = @_;
    my $me = __PACKAGE__."->on_formatwritetoscale_clicked";
    # Get ref to hash of all widgets on our form
    my $form = $__PACKAGE__::all_forms->{$instance};

    # REPLACE the line below with the actions to be taken when __PACKAGE__."->on_formatwritetoscale_clicked." is called
    __PACKAGE__->show_skeleton_message($me, \@_, __PACKAGE__, "$Glade::PerlRun::pixmaps_directory/Logo.xpm");

} # End of sub on_formatwritetoscale_clicked

sub on_item_label_toggled {
    my ($class, $data, $object, $instance, $event) = @_;
    my $me = __PACKAGE__."->on_item_label_toggled";
    # Get ref to hash of all widgets on our form
    my $form = $__PACKAGE__::all_forms->{$instance};

    # REPLACE the line below with the actions to be taken when __PACKAGE__."->on_item_label_toggled." is called
    __PACKAGE__->show_skeleton_message($me, \@_, __PACKAGE__, "$Glade::PerlRun::pixmaps_directory/Logo.xpm");

} # End of sub on_item_label_toggled

sub on_label_suite_changed {
    my ($class, $data, $object, $instance, $event) = @_;
    my $me = __PACKAGE__."->on_label_suite_changed";
    # Get ref to hash of all widgets on our form
    my $form = $__PACKAGE__::all_forms->{$instance};

    # REPLACE the line below with the actions to be taken when __PACKAGE__."->on_label_suite_changed." is called
    __PACKAGE__->show_skeleton_message($me, \@_, __PACKAGE__, "$Glade::PerlRun::pixmaps_directory/Logo.xpm");

} # End of sub on_label_suite_changed

sub on_print_format_delete_event {
    my ($class, $data, $object, $instance, $event) = @_;
    my $me = __PACKAGE__."->on_print_format_delete_event";
    # Get ref to hash of all widgets on our form
    my $form = $__PACKAGE__::all_forms->{$instance};

    # REPLACE the line below with the actions to be taken when __PACKAGE__."->on_print_format_delete_event." is called
    __PACKAGE__->show_skeleton_message($me, \@_, __PACKAGE__, "$Glade::PerlRun::pixmaps_directory/Logo.xpm");

} # End of sub on_print_format_delete_event

sub on_print_format_read_clicked {
    my ($class, $data, $object, $instance, $event) = @_;
    my $me = __PACKAGE__."->on_print_format_read_clicked";
    # Get ref to hash of all widgets on our form
    my $form = $__PACKAGE__::all_forms->{$instance};

    # REPLACE the line below with the actions to be taken when __PACKAGE__."->on_print_format_read_clicked." is called
    __PACKAGE__->show_skeleton_message($me, \@_, __PACKAGE__, "$Glade::PerlRun::pixmaps_directory/Logo.xpm");

} # End of sub on_print_format_read_clicked

sub on_print_format_write_clicked {
    my ($class, $data, $object, $instance, $event) = @_;
    my $me = __PACKAGE__."->on_print_format_write_clicked";
    # Get ref to hash of all widgets on our form
    my $form = $__PACKAGE__::all_forms->{$instance};

    # REPLACE the line below with the actions to be taken when __PACKAGE__."->on_print_format_write_clicked." is called
    __PACKAGE__->show_skeleton_message($me, \@_, __PACKAGE__, "$Glade::PerlRun::pixmaps_directory/Logo.xpm");

} # End of sub on_print_format_write_clicked

sub on_reportaccount_toggled {
    my ($class, $data, $object, $instance, $event) = @_;
    my $me = __PACKAGE__."->on_reportaccount_toggled";
    # Get ref to hash of all widgets on our form
    my $form = $__PACKAGE__::all_forms->{$instance};

    # REPLACE the line below with the actions to be taken when __PACKAGE__."->on_reportaccount_toggled." is called
    __PACKAGE__->show_skeleton_message($me, \@_, __PACKAGE__, "$Glade::PerlRun::pixmaps_directory/Logo.xpm");

} # End of sub on_reportaccount_toggled

sub on_reportbody_toggled {
    my ($class, $data, $object, $instance, $event) = @_;
    my $me = __PACKAGE__."->on_reportbody_toggled";
    # Get ref to hash of all widgets on our form
    my $form = $__PACKAGE__::all_forms->{$instance};

    # REPLACE the line below with the actions to be taken when __PACKAGE__."->on_reportbody_toggled." is called
    __PACKAGE__->show_skeleton_message($me, \@_, __PACKAGE__, "$Glade::PerlRun::pixmaps_directory/Logo.xpm");

} # End of sub on_reportbody_toggled

sub on_reporthead_toggled {
    my ($class, $data, $object, $instance, $event) = @_;
    my $me = __PACKAGE__."->on_reporthead_toggled";
    # Get ref to hash of all widgets on our form
    my $form = $__PACKAGE__::all_forms->{$instance};

    # REPLACE the line below with the actions to be taken when __PACKAGE__."->on_reporthead_toggled." is called
    __PACKAGE__->show_skeleton_message($me, \@_, __PACKAGE__, "$Glade::PerlRun::pixmaps_directory/Logo.xpm");

} # End of sub on_reporthead_toggled

sub on_transaccount_toggled {
    my ($class, $data, $object, $instance, $event) = @_;
    my $me = __PACKAGE__."->on_transaccount_toggled";
    # Get ref to hash of all widgets on our form
    my $form = $__PACKAGE__::all_forms->{$instance};

    # REPLACE the line below with the actions to be taken when __PACKAGE__."->on_transaccount_toggled." is called
    __PACKAGE__->show_skeleton_message($me, \@_, __PACKAGE__, "$Glade::PerlRun::pixmaps_directory/Logo.xpm");

} # End of sub on_transaccount_toggled

sub on_transbody_toggled {
    my ($class, $data, $object, $instance, $event) = @_;
    my $me = __PACKAGE__."->on_transbody_toggled";
    # Get ref to hash of all widgets on our form
    my $form = $__PACKAGE__::all_forms->{$instance};

    # REPLACE the line below with the actions to be taken when __PACKAGE__."->on_transbody_toggled." is called
    __PACKAGE__->show_skeleton_message($me, \@_, __PACKAGE__, "$Glade::PerlRun::pixmaps_directory/Logo.xpm");

} # End of sub on_transbody_toggled

sub on_transhead_toggled {
    my ($class, $data, $object, $instance, $event) = @_;
    my $me = __PACKAGE__."->on_transhead_toggled";
    # Get ref to hash of all widgets on our form
    my $form = $__PACKAGE__::all_forms->{$instance};

    # REPLACE the line below with the actions to be taken when __PACKAGE__."->on_transhead_toggled." is called
    __PACKAGE__->show_skeleton_message($me, \@_, __PACKAGE__, "$Glade::PerlRun::pixmaps_directory/Logo.xpm");

} # End of sub on_transhead_toggled

sub on_type_bar_toggled {
    my ($class, $data, $object, $instance, $event) = @_;
    my $me = __PACKAGE__."->on_type_bar_toggled";
    # Get ref to hash of all widgets on our form
    my $form = $__PACKAGE__::all_forms->{$instance};

    # REPLACE the line below with the actions to be taken when __PACKAGE__."->on_type_bar_toggled." is called
    __PACKAGE__->show_skeleton_message($me, \@_, __PACKAGE__, "$Glade::PerlRun::pixmaps_directory/Logo.xpm");

} # End of sub on_type_bar_toggled

sub on_type_figure_toggled {
    my ($class, $data, $object, $instance, $event) = @_;
    my $me = __PACKAGE__."->on_type_figure_toggled";
    # Get ref to hash of all widgets on our form
    my $form = $__PACKAGE__::all_forms->{$instance};

    # REPLACE the line below with the actions to be taken when __PACKAGE__."->on_type_figure_toggled." is called
    __PACKAGE__->show_skeleton_message($me, \@_, __PACKAGE__, "$Glade::PerlRun::pixmaps_directory/Logo.xpm");

} # End of sub on_type_figure_toggled

sub on_type_match_string_toggled {
    my ($class, $data, $object, $instance, $event) = @_;
    my $me = __PACKAGE__."->on_type_match_string_toggled";
    # Get ref to hash of all widgets on our form
    my $form = $__PACKAGE__::all_forms->{$instance};

    # REPLACE the line below with the actions to be taken when __PACKAGE__."->on_type_match_string_toggled." is called
    __PACKAGE__->show_skeleton_message($me, \@_, __PACKAGE__, "$Glade::PerlRun::pixmaps_directory/Logo.xpm");

} # End of sub on_type_match_string_toggled

sub on_type_string_toggled {
    my ($class, $data, $object, $instance, $event) = @_;
    my $me = __PACKAGE__."->on_type_string_toggled";
    # Get ref to hash of all widgets on our form
    my $form = $__PACKAGE__::all_forms->{$instance};

    # REPLACE the line below with the actions to be taken when __PACKAGE__."->on_type_string_toggled." is called
    __PACKAGE__->show_skeleton_message($me, \@_, __PACKAGE__, "$Glade::PerlRun::pixmaps_directory/Logo.xpm");

} # End of sub on_type_string_toggled










1;

__END__

#===============================================================================
#==== Documentation
#===============================================================================
=pod

=head1 NAME

print_scaleSIGS - version 0.01 週五 11月  1 15:18:17 CST 2002

No description

=head1 SYNOPSIS

 use print_scaleSIGS;

 To construct the window object and show it call
 
 Gtk->init;
 my $window = main->new;
 $window->TOPLEVEL->show;
 Gtk->main;
 
 OR use the shorthand for the above calls
 
 main->app_run;

=head1 DESCRIPTION

Unfortunately, the author has not yet written any documentation :-(

=head1 AUTHOR

 <allways@allways.taipei.excell.com.tw>

=cut
